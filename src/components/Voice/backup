<Text style={styles.stat}>{`Recognized: ${
          this.state.recognized
        }`}</Text>
        <Text style={styles.stat}>{`Pitch: ${this.state.pitch}`}</Text>


<Text style={styles.stat}>Results</Text>
        {this.state.results.map((result, index) => {
          return (
            <Text key={`result-${index}`} style={styles.stat}>
              {result}
            </Text>
          );
        })}


<Text style={styles.stat}>{`End: ${this.state.end}`}</Text>


 <TouchableHighlight onPress={this._stopRecognizing}>
          <Text style={styles.action}>Stop Recognizing</Text>
        </TouchableHighlight>
        <TouchableHighlight onPress={this._cancelRecognizing}>
          <Text style={styles.action}>Cancel</Text>
        </TouchableHighlight>
        <TouchableHighlight onPress={this._destroyRecognizer}>
          <Text style={styles.action}>Destroy</Text>
        </TouchableHighlight>


        then(() => {if(this.state.results[0]){this.setState({done: true})}});



        
    right: 10px;
    background: #19cdce;
    width: 60px;
    height: 60px;
    justifyContent: center;
    padding-left:  8px;
    border-radius: 4px;


{/*onLocationSelected = {this.handlelocationSelected} search = {this.state.search}*/}
    --------------------------------------------------------------------Places.tsx


    import React, { Component, useEffect, useRef , createRef} from 'react';
import {Platform} from 'react-native';
import { TextInput } from 'react-native';
import { GooglePlacesAutocomplete, GooglePlacesAutocompleteRef } from 'react-native-google-places-autocomplete';
import { View } from 'react-native';
import '../../image.ts';
import uberx from '../../img/uberx.png';
import { Container, TypeTitle, TypeDescription, TypeImage, RequestButton, RequestButtonText } from './styles';

interface IRecipeProps {
    onLocationSelected?: any,
    search: string,
  }
interface IRecipeState {
   
}

export default class Places extends Component <IRecipeProps, IRecipeState>{
    state:any = {
        searchFocused: null,
        search: '',
    }

    render(){

        const { searchFocused } = this.state; 
        const { onLocationSelected }  =  this.props;
        const googleplaces = createRef<GooglePlacesAutocompleteRef>();
        
        useEffect(() => {
            googleplaces.current?.setAddressText('Some Text');
        }, []);
        
  return(
        <Container>
        <TypeTitle>Resultados da Pesquisa</TypeTitle>
        <GooglePlacesAutocomplete
        ref = {googleplaces}
        placeholder = "Para onde?"
        minLength={2}
        onPress = {(data, details = null) => {
            console.log(data, details);}}
        query={{
            key: 'AIzaSyBMafnS7Tw3QxAkaBQO0-V9DsueL3SjsxY',
            language: 'pt'
        }}
        textInputProps={{
            onFocus: () => {this.setState({ searchFocused: 'auto' })},
            onBlur: () => {this.setState({ searchFocused: null })},
            autoCapitalize: 'none',
            autoCorrect: false
        }}
        listViewDisplayed={searchFocused}
        fetchDetails
        enablePoweredByContainer = {false}        
        styles={{
            container:{
                position: "absolute",
                top: Platform.select({ ios: 60, android: 40}),
                width: "100%",    
            },
            textInputContainer: {
                flex:1,
                height: 54,
                marginHorizontal: 20,
                borderTopWidth: 0,
                borderBottomWidth: 0,
                backgroundColor: "transparent"
            },
            textInput: {
                height: 54,
                margin: 0,
                borderRadius: 0,
                paddingTop: 0,
                paddingBottom: 0,
                paddingLeft: 20,
                paddingRight: 20,
                marginTop: 0,
                marginLeft: 0,
                marginRight: 0,
                elevation: 5,
                shadowColor: "#000",
                shadowOpacity: 0.1,
                shadowRadius: 15,
                borderWidth: 1,
                borderColor: "#DDD",
                fontSize: 18,
                shadowOffset: {width: 0, height:0}
            },
            listView: {
                borderWidth: 1,
                borderColor: "#DDD",
                backgroundColor: "#FFF",
                marginHorizontal: 20,
                elevation: 5,
                shadowColor: "#000",
                shadowOpacity: 0.1,
                shadowRadius: 15,
                shadowOffset: {width: 0, height:0},
                marginTop: 10
            },
            description: {
                fontSize: 16
            },
            row: {
                padding: 20,
                height: 58  
            }
        }}
          />
        </Container>)
    }
}